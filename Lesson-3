## Proxy class
When console logging a reactive variable in Vue3, you often see the words like "proxy", "handler", and "target". You also have to open up some collapsables just to see the value of the damn variable 
In JavaScript, the proxy class enables additional behaviour when object-specific operations are called on it. 
Object-specific operations being things like:
- Get (obj.prop)
- Set (obj.prop = "new value")
- HasOwnProperty (obj.hasOwnProperty())
- ToString (obj.toString())

The common use of proxies are to log access, validate data, sanitise data, and extend base functionality.
[More examples](https://github.com/mikaelbr/awesome-es2015-proxy)

To create a proxy you need an object and a handler object. The handler object will define all the object-specific operations that you want to add additional behaviours to. These are referred to as traps. 

List of traps

| Internal method    | Corresponding trap |
| -------- | ------- |
| [[GetPrototypeOf]]  | getPrototypeOf()    |
| [[SetPrototypeOf]] | setPrototypeOf()     |
| [[IsExtensible]]    | isExtensible()    |
| [[PreventExtensions]]    | preventExtensions()    |
| [[GetOwnProperty]]    | getOwnPropertyDescriptor()    |
| [[DefineOwnProperty]]    | defineProperty()    |
| [[HasProperty]]    | has()    |
| [[Get]]    | get()    |
| [[Set]]    | set()    |
| [[Delete]]    | deleteProperty()    |
| [[OwnPropertyKeys]]    | ownKeys()    |


```
const obj = {
  foo: "bar",
  bar: "foo"
}

const handler = {
  get(target, key){
    console.log("getting", key, "from", target);
    return target[key]
  },
  set(target, key, value){
    console.log("setting", key, "with value", value, "in", target);
    target[key] = value;
  }
}

const proxy = new Proxy(obj, handler)
console.log(proxy.foo) //calls the get in the handler
proxy.foo = "baar" //calls the set
```
